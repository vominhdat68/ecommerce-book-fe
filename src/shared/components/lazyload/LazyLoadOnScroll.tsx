import React, { useEffect, useRef, useState, type ReactNode } from 'react';

interface LazyLoadOnScrollProps {
  /** Component con c·∫ßn lazy load */
  children: ReactNode;

  /** 
   * Kho·∫£ng c√°ch t·ª´ viewport ƒë·ªÉ k√≠ch ho·∫°t load.
   * V√≠ d·ª•: '200px 0px' ‚Üí khi c√≤n c√°ch v√πng nh√¨n th·∫•y 200px s·∫Ω b·∫Øt ƒë·∫ßu load.
   */
  rootMargin?: string;

  /**
   * Ng∆∞·ª°ng k√≠ch ho·∫°t: t·ª∑ l·ªá ph·∫ßn t·ª≠ hi·ªÉn th·ªã trong viewport.
   * - 0.0 ‚Üí ch·ªâ c·∫ßn ch·∫°m nh·∫π v√†o viewport l√† k√≠ch ho·∫°t.
   * - 1.0 ‚Üí ph·∫£i hi·ªÉn th·ªã to√†n b·ªô m·ªõi k√≠ch ho·∫°t.
   */
  threshold?: number;

  /**
   * Component hi·ªÉn th·ªã t·∫°m (skeleton/loading UI) khi ch∆∞a load component th·∫≠t.
   */
  placeholder?: ReactNode;

  /**
   * M·ª©c ƒë·ªô ∆∞u ti√™n lazy load.
   * - 'high'   ‚Üí load s·ªõm h∆°n (c√°ch xa viewport v·∫´n load).
   * - 'medium' ‚Üí m·∫∑c ƒë·ªãnh.
   * - 'low'    ‚Üí load mu·ªôn h∆°n, khi g·∫ßn t·ªõi viewport m·ªõi load.
   */
  priority?: 'high' | 'medium' | 'low';

  /**
   * N·∫øu = true ‚Üí b·ªè qua lazy load, render lu√¥n component th·∫≠t.
   * D√πng cho mobile ho·∫∑c SSR.
   */
  immediate?: boolean;
}

const LazyLoadOnScroll: React.FC<LazyLoadOnScrollProps> = ({
  children,
  rootMargin = '500px 0px',
  threshold = 0.1,
  placeholder = null,
  priority = 'medium',
  immediate = false,
}) => {
  // ----------------------------------------------------------
  // üß† State qu·∫£n l√Ω
  // ----------------------------------------------------------
  const [isVisible, setIsVisible] = useState(immediate); // true ‚Üí render th·∫≠t
  const [isMounted, setIsMounted] = useState(immediate); // true ‚Üí c√≥ th·ªÉ render placeholder
  const ref = useRef<HTMLDivElement | null>(null);       // ref DOM d√πng cho observer
  const hasBeenVisible = useRef(immediate);              // ƒë√°nh d·∫•u ƒë√£ hi·ªÉn th·ªã

  // ----------------------------------------------------------
  // ‚öôÔ∏è C·∫•u h√¨nh ∆∞u ti√™n (priority)
  // ----------------------------------------------------------
  const priorityConfig = {
    high: { rootMargin: '600px 0px', delay: 0 },
    medium: { rootMargin: '550px 0px', delay: 100 },
    low: { rootMargin: '450px 0px', delay: 300 },
  };

  // ----------------------------------------------------------
  // üéØ Thi·∫øt l·∫≠p IntersectionObserver
  // ----------------------------------------------------------
  useEffect(() => {
    if (immediate || hasBeenVisible.current) return;

    // üëâ T·∫°o 1 marker ·∫£o (1px) trong DOM ƒë·ªÉ observer theo d√µi v·ªã tr√≠
    const marker = document.createElement('div');
    marker.style.height = '1px';
    marker.style.width = '100%';
    marker.style.position = 'relative';
    marker.style.pointerEvents = 'none';

    const parent = document.body;
    parent.appendChild(marker);
    ref.current = marker;

    const config = priorityConfig[priority];

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting && !hasBeenVisible.current) {
          setTimeout(() => {
            setIsMounted(true);              // Cho ph√©p render placeholder
            setTimeout(() => setIsVisible(true), 50); // Render component th·∫≠t
            hasBeenVisible.current = true;
            observer.unobserve(marker);       // Ng·ª´ng quan s√°t
            parent.removeChild(marker);       // X√≥a marker ·∫£o
          }, config.delay);
        }
      },
      {
        rootMargin: config.rootMargin || rootMargin,
        threshold,
      }
    );

    observer.observe(marker);

    // üßπ Cleanup khi unmount
    return () => {
      observer.disconnect();
      if (parent.contains(marker)) parent.removeChild(marker);
    };
  }, [priority, threshold, immediate]);

  // ----------------------------------------------------------
  // üñºÔ∏è Render logic
  // ----------------------------------------------------------
  if (!isMounted) return null; // ch∆∞a c·∫ßn render g√¨

  return <>{isVisible ? children : placeholder}</>;
};

export default LazyLoadOnScroll;



// rootMargin: '<top> <right> <bottom> <left>'
export const LAZY_LOAD_CONFIG = {
  HIGH: {
    rootMargin: '600px 0px', // üëâ C√°ch v√πng nh√¨n th·∫•y 250px ƒë√£ b·∫Øt ƒë·∫ßu load
    priority: 'high' as const,
  },
  MEDIUM: {
    rootMargin: '150px 0px', // üëâ Khi c√≤n c√°ch ~150px
    priority: 'medium' as const,
  },
  LOW: {
    rootMargin: '50px 0px',  // üëâ Ch·ªâ load khi g·∫ßn t·ªõi v√πng hi·ªÉn th·ªã
    priority: 'low' as const,
  },
};