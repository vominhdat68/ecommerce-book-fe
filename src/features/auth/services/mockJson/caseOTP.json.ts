// sendOTP:
// OTP_SENT
// INVALID_PHONE
// OTP_SEND_FAILED
// TOO_MANY_REQUESTS

// resendOTP:
// OTP_RESENT
// OTP_RESEND_TOO_EARLY
// OTP_RESEND_LIMIT_REACHED
// OTP_RESEND_FAILED

// verifyOTP:
// OTP_VERIFIED
// OTP_INVALID
// OTP_EXPIRED
// OTP_TOO_MANY_ATTEMPTS
// OTP_ALREADY_USED
// OTP_NOT_FOUND
// OTP_BLOCKED
// OTP_SERVER_ERROR

// x·ª≠ l√Ω c√°c case c∆° b·∫£n ·ªü client
// x·ª≠ l√Ω c√°c case ·ªü server tr·∫£ v·ªÅ client
 
// flwo register
// compoent
// 0.tr·∫°ng th√°i ban ƒë·∫ßu initial
// 1.input SDT
// 2.ch·ªçn method nh·∫≠n SMS OTP
// 3.captcha x√°c th·ª±c(·∫©n)
// 4.input nh·∫≠p otp
// 5.(·∫©n)
//   5.1button countdown+g·ª≠i l·∫°i otp
//   5.2button ch·ªçn l·∫°i method g·ª≠i SMS OTP
// 6.input ƒë·∫∑c m·∫≠t kh·∫©u
// 7.button ƒëƒÉng k√Ω


// 1.
// input SDT:
//  valid: 10 s·ªë,
//  h·ª£p l·ªá (10 ch·ªØ s·ªë, s·ªë vi·ªát nam) -> cho ph√©p click button method nh·∫≠n SMS OTP
//  kh√¥ng h·ª£p l·ªá(ko ph·∫£i s·ªë vn) -> hi·ªán message(ch·ªâ hi·ªán khi valid,khi nh·∫≠p ƒë·ªß 10 s·ªë)


// 2.2button ch·ªçn method nh·∫≠n SMS OTP
//  click ch·ªçn method -> hi·ªán 3

// 3.captcha x√°c th·ª±c 
//  th√†nh c√¥ng -> 
//      t·ª± ƒë·ªông g·ª≠i y√™u c·∫ßu nh·∫≠n otp call api v·ªõi parameter(phone,method sms,token captcha)
// 	      th√†nh c√¥ng-> enable input 4;·∫©n 2;hi·ªán 5
// 	      th·∫•t b·∫°i-> message th√¥ng b√°o d∆∞·ªõi 1(sƒët ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω,...),
//                   n·∫øu b·ªã kh√≥a OTP -> ·∫©n 3
//  th·∫•t b·∫°i -> t·ª± ƒë·ªông x√°c th·ª±c l·∫°i(n·∫øu qu√° nhi·ªÅu l·∫ßn c√≥ th·ªÉ y√™u c·∫ßu ch·ªçn l·∫°i 2)

// 4.input nh·∫≠p otp - t·ª± ƒë·ªông call api verify otp parameter(phone, otp)
//  valid-> 6 s·ªë,
//  th√†nh c√¥ng -> enable input 6; ·∫©n 3; ·∫©n 4; ·∫©n 5; 
//  th·∫•t b·∫°i -> hi·ªán message d∆∞·ªõi 4

// 5.(·∫©n)
//   5.1button countdown<->G·ª≠i l·∫°i OTP
// 	hi·ªán countdown(m·∫∑c ƒë·ªãnh) -> h·∫øt countdown chuy·ªÉn sang tr·∫°ng th√°i button "G·ª≠i l·∫°i OTP"
// 	hi·ªán "G·ª≠i l·∫°i OTP" -> call api resend otp v·ªõi parameter(phone)
// 	  th√†nh c√¥ng-> countdown ch·∫°y l·∫°i;
// 	  th·∫•t b·∫°i-> hi·ªán message d∆∞·ªõi 4,t·∫Øt countdown
// 	      n·∫øu  state 
// 		reset"otp b·ªã kh√≥a,qu√° s·ªë l·∫ßn cho ph√©p g·ª≠i l·∫°i otp,"-> hi·ªán message d∆∞·ªõi 1;quay l·∫°i 0
// 		ph·ªß ƒë·ªãnh reset(c√°c state otp c√≤n ph√©p ho·∫°t ƒë·ªông) -> hi·ªán message d∆∞·ªõi 4
 
//   5.2button ch·ªçn l·∫°i method g·ª≠i SMS OTP
// 	quay v·ªÅ 0


// 6.input ƒë·∫∑c m·∫≠t kh·∫©u
// 7.button ƒëƒÉng k√Ω
//     valid 6
//     th√†nh c√¥ng-> chuy·ªÉn ƒë∆∞·ªõi screen login or ƒëƒÉng nh·∫≠p v√¥ lu√¥n
//     th·∫•t b·∫°i-> hi·ªán message server tr·∫£ v·ªÅ



export const sendOtpResponses = {
  // ‚úÖ Th√†nh c√¥ng
  "OTP_SENT": {
    success: true,
    code: "OTP_SENT",
    message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i.",
    data: {
      expireAt: 60,       // OTP h·∫øt h·∫°n sau X gi√¢y
      resendAvailableAt: 60,  // sau bao l√¢u th√¨ c√≥ th·ªÉ g·ª≠i l·∫°i
      attemptsAllowed: 5      // s·ªë l·∫ßn nh·∫≠p sai t·ªëi ƒëa
    }
  },

    
  // ‚ùå S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
  "USERNAME_ALREADY_EXISTS": {
    success: false,
    code: "USERNAME_ALREADY_EXISTS",
    message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng."
  },

  // ‚ùå S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá
  "INVALID_PHONE": {
    success: false,
    code: "INVALID_PHONE",
    message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá."
  },

  // ‚ùå G·ª≠i OTP th·∫•t b·∫°i (do SMS/Zalo gateway)
  "OTP_SEND_FAILED": {
    success: false,
    code: "OTP_SEND_FAILED",
    message: "Kh√¥ng th·ªÉ g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i sau.",
    data: {
      reason: "SMS_GATEWAY_ERROR"
    }
  },

  // ‚ùå Spam g·ª≠i OTP qu√° nhi·ªÅu l·∫ßn
  "TOO_MANY_REQUESTS": {
    success: false,
    code: "TOO_MANY_REQUESTS",
    message: "B·∫°n ƒë√£ g·ª≠i OTP qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau.",
    data: {
      retryAfter: 300 // gi√¢y
    }
  }
}

export const resendOtpResponses = {
  // ‚úÖ Th√†nh c√¥ng
  "OTP_RESENT": {
    success: true,
    code: "OTP_RESENT",
    message: "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i.",
    data: {
      expireAt: 60,
      resendAvailableAt: 60,
      attemptsAllowed: 5
    }
  },

  // ‚ùå G·ª≠i l·∫°i qu√° s·ªõm
  "OTP_RESEND_TOO_EARLY": {
    success: false,
    code: "OTP_RESEND_TOO_EARLY",
    message: "Vui l√≤ng ƒë·ª£i tr∆∞·ªõc khi g·ª≠i l·∫°i OTP.",
    data: {
      resendAvailableAt: 1725738900000 // timestamp khi ƒë∆∞·ª£c ph√©p g·ª≠i l·∫°i
    }
  },

  // ‚ùå ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn resend
  "OTP_RESEND_LIMIT_REACHED": {
    success: false,
    code: "OTP_RESEND_LIMIT_REACHED",
    message: "B·∫°n ƒë√£ v∆∞·ª£t qu√° s·ªë l·∫ßn g·ª≠i l·∫°i OTP trong ng√†y."
  },

  // ‚ùå Server l·ªói khi g·ª≠i l·∫°i
  "OTP_RESEND_FAILED": {
    success: false,
    code: "OTP_RESEND_FAILED",
    message: "Kh√¥ng th·ªÉ g·ª≠i l·∫°i OTP. Vui l√≤ng th·ª≠ l·∫°i sau.",
    data: {
      reason: "REDIS_CONNECTION_FAILED"
    }
  }
}

export const verifyOtpResponses = {
  // ‚úÖ Th√†nh c√¥ng
  "OTP_VERIFIED": {
    success: true,
    code: "OTP_VERIFIED",
    message: "X√°c th·ª±c OTP th√†nh c√¥ng.",
    data: {
      userId: "12345",
      verified: true,
      accessToken: "mock-access-token",
      refreshToken: "mock-refresh-token"
    }
  },

  // ‚ùå Sai OTP
  "OTP_INVALID": {
    success: false,
    code: "OTP_INVALID",
    message: "M√£ OTP kh√¥ng ch√≠nh x√°c.",
    data: {
      remainingAttempts: 2,
      expireAt: 60
    }
  },

  // ‚ùå OTP ƒë√£ h·∫øt h·∫°n
  "OTP_EXPIRED": {
    success: false,
    code: "OTP_EXPIRED",
    message: "M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.",
    data: {
      expiredAt: 60
    }
  },

  // ‚ùå Nh·∫≠p sai qu√° s·ªë l·∫ßn cho ph√©p
  "OTP_TOO_MANY_ATTEMPTS": {
    success: false,
    code: "OTP_TOO_MANY_ATTEMPTS",
    message: "B·∫°n kh√¥ng th·ªÉ x√°c th·ª±c OTP, v√¨ nh·∫≠p sai qu√° nhi·ªÅu l·∫ßn.",
    data: {
      maxAttempts: 5,
      lockedUntil: 30 * 60
    }
  },

  // ‚ùå OTP ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
  "OTP_ALREADY_USED": {
    success: false,
    code: "OTP_ALREADY_USED",
    message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng. Vui l√≤ng y√™u c·∫ßu OTP m·ªõi."
  },

  // ‚ùå OTP kh√¥ng t·ªìn t·∫°i
  "OTP_NOT_FOUND": {
    success: false,
    code: "OTP_NOT_FOUND",
    message: "Kh√¥ng t√¨m th·∫•y m√£ OTP. Vui l√≤ng g·ª≠i l·∫°i."
  },

  // ‚ùå OTP b·ªã kh√≥a
  "OTP_BLOCKED": {
    success: false,
    code: "OTP_BLOCKED",
    message: "B·∫°n ƒë√£ b·ªã t·∫°m kh√≥a x√°c th·ª±c OTP. Vui l√≤ng th·ª≠ l·∫°i sau.",
    data: {
      lockedUntil: 30 * 60
    }
  },

  // ‚ùå L·ªói server
  "OTP_SERVER_ERROR": {
    success: false,
    code: "OTP_SERVER_ERROR",
    message: "C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c OTP. Vui l√≤ng th·ª≠ l·∫°i sau.",
    data: {
      reason: "REDIS_CONNECTION_FAILED"
    }
  }
}


// üìå T·ªïng h·ª£p c√°c tham s·ªë c√≥ th·ªÉ c√≥ trong "data":
// - expireAt: th·ªùi gian OTP h·∫øt h·∫°n (timestamp ms ho·∫∑c gi√¢y, th∆∞·ªùng 3-5 ph√∫t)
// - resendAvailableAt: th·ªùi ƒëi·ªÉm cho ph√©p g·ª≠i l·∫°i OTP (timestamp ms ho·∫∑c gi√¢y, th∆∞·ªùng 60s)
// - attemptsAllowed: s·ªë l·∫ßn nh·∫≠p sai t·ªëi ƒëa ƒë∆∞·ª£c ph√©p
// - remainingAttempts: s·ªë l·∫ßn nh·∫≠p sai c√≤n l·∫°i
// - expiredAt: th·ªùi ƒëi·ªÉm OTP ƒë√£ h·∫øt h·∫°n
// - maxAttempts: s·ªë l·∫ßn nh·∫≠p sai t·ªëi ƒëa
// - lockedUntil: th·ªùi gian b·ªã kh√≥a (s ho·∫∑c timestamp ms)
// - userId: ID c·ªßa user
// - verified: tr·∫°ng th√°i x√°c th·ª±c (true/false)
// - accessToken: JWT token ƒëƒÉng nh·∫≠p
// - refreshToken: JWT refresh token
// - reason: m√¥ t·∫£ l√Ω do l·ªói (d√πng cho debug/log)
